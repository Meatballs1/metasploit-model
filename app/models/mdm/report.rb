# Report generated by Metasploit Pro.
#
# @todo https://www.pivotaltracker.com/story/show/52417783
class Mdm::Report < ActiveRecord::Base

  #
  # Associations
  #

  # @!attribute [rw] task
  #   Task that generated this report.
  #
  #   @return [Mdm::Task]
  belongs_to :task, :class_name => 'Mdm::Task'

  # @!attribute [rw] workspace
  #   Workspace from which this report was generated.
  #
  #   @return [Mdm::Workspace]
  belongs_to :workspace, :class_name => 'Mdm::Workspace'

  #
  # Attributes
  #

  # @!attribute [rw] created_at
  #   When this report was created.  This will be before the actual report file at {#path} is written.
  #
  #   @return [DateTime]

  # @!attribute [rw] created_by
  #   {Mdm::User#username Name of user} that created this report.
  #
  #   @return [String]
  #   @todo https://www.pivotaltracker.com/story/show/52457071

  # @!attribute [rw] downloaded_at
  #   The last time this report was downloaded by a user.
  #
  #   @return [DateTime]

  # @!attribute [rw] name
  #   Name of this report.
  #
  #   @return [String]

  # @!attribute [rw] path
  #   Path to the report on-disk.
  #
  #   @return [String]

  # @!attribute [rw] rtype
  #   The type of the report.
  #
  #   @return [String]

  # @!attribute [rw] updated_at
  #   The last time this report was updated.
  #
  #   @return [DateTime]

  #
  # Callbacks
  #

  before_destroy :delete_file

  #
  # Scopes
  #

  #
  # @!group Scopes
  #

  # @!method self.flagged
  #   Returns any reports that have not been downloaded yet.
  #
  #   @return [ActiveRecord::Relation]
  scope :flagged, where('reports.downloaded_at is NULL')

  #
  # @!endgroup
  #

  #
  # Serializations
  #

  # @!attribute [rw] options
  #   Options used to generate the report.
  #
  #   @return [Hash]
  serialize :options, MetasploitDataModels::Base64Serializer.new

  #
  # Validations
  #

  validates :name,
            :format => {
                :allow_blank => true,
                :message => "name must consist of A-Z, 0-9, space, dot, underscore, or dash",
                :with => /^[A-Za-z0-9\x20\x2e\x2d\x5f\x5c]+$/
            }

  private

  # Deletes file at {#path}, so that deleting this report from the database will also clean up the disk.
  #
  # @return [void]
  def delete_file
    c = Pro::Client.get rescue nil
    if c
      c.report_delete_file(self[:id])
    else
      ::File.unlink(self.path) rescue nil
    end
  end

  # restore public for load hooks
  public

  ActiveSupport.run_load_hooks(:mdm_report, self)
end

